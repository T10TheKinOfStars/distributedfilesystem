// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "FileStore.h"
#include "fileworker.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

FileWorker fworker;
class FileStoreHandler : virtual public FileStoreIf {
 public:
  FileStoreHandler() {
    // Your initialization goes here
  }

  void writeFile(const RFile& rFile) {
    // Your implementation goes here
    //printf("writeFile\n");
    if (fworker.writefile(rFile) != -1) {
        _return.__set_status(Status::SUCCESSFUL);
    } else {
        _return.__set_status(Status::FAILED);
    }
  }

  void readFile(RFile& _return, const std::string& filename, const UserID& owner) {
    // Your implementation goes here
    //printf("readFile\n");
    if (fworker.getUserFileMap().find(owner) != fworker.getUserFileMap().end()) {
        if (fworker.readfile(owner,filename,_return) == -1) {
            SystemException se;
            se.__set_message("read file failed");
            throw se;
        }
    }
  }

  void deleteFile(const std::string& filename, const UserID& owner) {
    // Your implementation goes here
    //printf("deleteFile\n");
    if (fworker.getUserFileMap().find(owner) == fworker.getUserFileMap().end()) {
        //not this user, return
        _return.__set_status(Status::FAILED);
    } else {
        if (fworker.deletefile(owner,filename) != -1) {
            _return.__set_status(Status::SUCCESSFUL);
        } else {
            _return.__set_status(Status::FAILED);
            SystemException se;
            se.__set_message("write file failed");
            throw se;
        }
    }
  }

  void findSucc(NodeID& _return, const std::string& key) {
    // Your implementation goes here
    printf("findSucc\n");
  }

  void findPred(NodeID& _return, const std::string& key) {
    // Your implementation goes here
    printf("findPred\n");
  }

  void getNodeSucc(NodeID& _return) {
    // Your implementation goes here
    printf("getNodeSucc\n");
  }

  void getNodePred(NodeID& _return) {
    // Your implementation goes here
    printf("getNodePred\n");
  }

  void setNodePred(const NodeID& nodeId) {
    // Your implementation goes here
    printf("setNodePred\n");
  }

  void updateFinger(const int32_t idx, const NodeID& nodeId) {
    // Your implementation goes here
    printf("updateFinger\n");
  }

  void getFingertable(std::vector<NodeID> & _return) {
    // Your implementation goes here
    printf("getFingertable\n");
  }

  void pullUnownedFiles(std::vector<RFile> & _return) {
    // Your implementation goes here
    printf("pullUnownedFiles\n");
  }

  void pushUnownedFiles(const std::vector<RFile> & files) {
    // Your implementation goes here
    printf("pushUnownedFiles\n");
  }

  void join(const NodeID& nodeId) {
    // Your implementation goes here
    printf("join\n");
  }

  void remove() {
    // Your implementation goes here
    printf("remove\n");
  }

  void stabilize() {
    // Your implementation goes here
    printf("stabilize\n");
  }

  void notify(const NodeID& nodeId) {
    // Your implementation goes here
    printf("notify\n");
  }

  void fixFingers() {
    // Your implementation goes here
    printf("fixFingers\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<FileStoreHandler> handler(new FileStoreHandler());
  shared_ptr<TProcessor> processor(new FileStoreProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  fworker.init();
  server.serve();
  return 0;
}

