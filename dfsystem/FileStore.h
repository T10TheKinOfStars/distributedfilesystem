/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileStore_H
#define FileStore_H

#include <thrift/TDispatchProcessor.h>
#include "chord_types.h"



class FileStoreIf {
 public:
  virtual ~FileStoreIf() {}
  virtual void writeFile(const RFile& rFile) = 0;
  virtual void readFile(RFile& _return, const std::string& filename, const UserID& owner) = 0;
  virtual void deleteFile(const std::string& filename, const UserID& owner) = 0;
  virtual void setFingertable(const std::vector<NodeID> & node_list) = 0;
  virtual void updateFinger(const int32_t idx, const NodeID& nodeId) = 0;
  virtual void getFingertable(std::vector<NodeID> & _return) = 0;
  virtual void fixFingers() = 0;
  virtual void findSucc(NodeID& _return, const std::string& key) = 0;
  virtual void findPred(NodeID& _return, const std::string& key) = 0;
  virtual void getNodeSucc(NodeID& _return) = 0;
  virtual void getNodePred(NodeID& _return) = 0;
  virtual void setNodePred(const NodeID& nodeId) = 0;
  virtual void pullUnownedFiles(std::vector<RFile> & _return) = 0;
  virtual void pushUnownedFiles(const std::vector<RFile> & files) = 0;
  virtual void join(const NodeID& nodeId) = 0;
  virtual void remove() = 0;
  virtual void stabilize() = 0;
  virtual void notify(const NodeID& nodeId) = 0;
};

class FileStoreIfFactory {
 public:
  typedef FileStoreIf Handler;

  virtual ~FileStoreIfFactory() {}

  virtual FileStoreIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileStoreIf* /* handler */) = 0;
};

class FileStoreIfSingletonFactory : virtual public FileStoreIfFactory {
 public:
  FileStoreIfSingletonFactory(const boost::shared_ptr<FileStoreIf>& iface) : iface_(iface) {}
  virtual ~FileStoreIfSingletonFactory() {}

  virtual FileStoreIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileStoreIf* /* handler */) {}

 protected:
  boost::shared_ptr<FileStoreIf> iface_;
};

class FileStoreNull : virtual public FileStoreIf {
 public:
  virtual ~FileStoreNull() {}
  void writeFile(const RFile& /* rFile */) {
    return;
  }
  void readFile(RFile& /* _return */, const std::string& /* filename */, const UserID& /* owner */) {
    return;
  }
  void deleteFile(const std::string& /* filename */, const UserID& /* owner */) {
    return;
  }
  void setFingertable(const std::vector<NodeID> & /* node_list */) {
    return;
  }
  void updateFinger(const int32_t /* idx */, const NodeID& /* nodeId */) {
    return;
  }
  void getFingertable(std::vector<NodeID> & /* _return */) {
    return;
  }
  void fixFingers() {
    return;
  }
  void findSucc(NodeID& /* _return */, const std::string& /* key */) {
    return;
  }
  void findPred(NodeID& /* _return */, const std::string& /* key */) {
    return;
  }
  void getNodeSucc(NodeID& /* _return */) {
    return;
  }
  void getNodePred(NodeID& /* _return */) {
    return;
  }
  void setNodePred(const NodeID& /* nodeId */) {
    return;
  }
  void pullUnownedFiles(std::vector<RFile> & /* _return */) {
    return;
  }
  void pushUnownedFiles(const std::vector<RFile> & /* files */) {
    return;
  }
  void join(const NodeID& /* nodeId */) {
    return;
  }
  void remove() {
    return;
  }
  void stabilize() {
    return;
  }
  void notify(const NodeID& /* nodeId */) {
    return;
  }
};

typedef struct _FileStore_writeFile_args__isset {
  _FileStore_writeFile_args__isset() : rFile(false) {}
  bool rFile :1;
} _FileStore_writeFile_args__isset;

class FileStore_writeFile_args {
 public:

  static const char* ascii_fingerprint; // = "822AC0906CAA16CCAF844BAA847740EA";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x2A,0xC0,0x90,0x6C,0xAA,0x16,0xCC,0xAF,0x84,0x4B,0xAA,0x84,0x77,0x40,0xEA};

  FileStore_writeFile_args(const FileStore_writeFile_args&);
  FileStore_writeFile_args& operator=(const FileStore_writeFile_args&);
  FileStore_writeFile_args() {
  }

  virtual ~FileStore_writeFile_args() throw();
  RFile rFile;

  _FileStore_writeFile_args__isset __isset;

  void __set_rFile(const RFile& val);

  bool operator == (const FileStore_writeFile_args & rhs) const
  {
    if (!(rFile == rhs.rFile))
      return false;
    return true;
  }
  bool operator != (const FileStore_writeFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_writeFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_writeFile_args& obj);
};


class FileStore_writeFile_pargs {
 public:

  static const char* ascii_fingerprint; // = "822AC0906CAA16CCAF844BAA847740EA";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x2A,0xC0,0x90,0x6C,0xAA,0x16,0xCC,0xAF,0x84,0x4B,0xAA,0x84,0x77,0x40,0xEA};


  virtual ~FileStore_writeFile_pargs() throw();
  const RFile* rFile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_writeFile_pargs& obj);
};

typedef struct _FileStore_writeFile_result__isset {
  _FileStore_writeFile_result__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_writeFile_result__isset;

class FileStore_writeFile_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  FileStore_writeFile_result(const FileStore_writeFile_result&);
  FileStore_writeFile_result& operator=(const FileStore_writeFile_result&);
  FileStore_writeFile_result() {
  }

  virtual ~FileStore_writeFile_result() throw();
  SystemException systemException;

  _FileStore_writeFile_result__isset __isset;

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_writeFile_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_writeFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_writeFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_writeFile_result& obj);
};

typedef struct _FileStore_writeFile_presult__isset {
  _FileStore_writeFile_presult__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_writeFile_presult__isset;

class FileStore_writeFile_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~FileStore_writeFile_presult() throw();
  SystemException systemException;

  _FileStore_writeFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_writeFile_presult& obj);
};

typedef struct _FileStore_readFile_args__isset {
  _FileStore_readFile_args__isset() : filename(false), owner(false) {}
  bool filename :1;
  bool owner :1;
} _FileStore_readFile_args__isset;

class FileStore_readFile_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  FileStore_readFile_args(const FileStore_readFile_args&);
  FileStore_readFile_args& operator=(const FileStore_readFile_args&);
  FileStore_readFile_args() : filename(), owner() {
  }

  virtual ~FileStore_readFile_args() throw();
  std::string filename;
  UserID owner;

  _FileStore_readFile_args__isset __isset;

  void __set_filename(const std::string& val);

  void __set_owner(const UserID& val);

  bool operator == (const FileStore_readFile_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(owner == rhs.owner))
      return false;
    return true;
  }
  bool operator != (const FileStore_readFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_readFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_readFile_args& obj);
};


class FileStore_readFile_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~FileStore_readFile_pargs() throw();
  const std::string* filename;
  const UserID* owner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_readFile_pargs& obj);
};

typedef struct _FileStore_readFile_result__isset {
  _FileStore_readFile_result__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_readFile_result__isset;

class FileStore_readFile_result {
 public:

  static const char* ascii_fingerprint; // = "3EA130E3D3BEF0C184CE2057A8221B3A";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0xA1,0x30,0xE3,0xD3,0xBE,0xF0,0xC1,0x84,0xCE,0x20,0x57,0xA8,0x22,0x1B,0x3A};

  FileStore_readFile_result(const FileStore_readFile_result&);
  FileStore_readFile_result& operator=(const FileStore_readFile_result&);
  FileStore_readFile_result() {
  }

  virtual ~FileStore_readFile_result() throw();
  RFile success;
  SystemException systemException;

  _FileStore_readFile_result__isset __isset;

  void __set_success(const RFile& val);

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_readFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_readFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_readFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_readFile_result& obj);
};

typedef struct _FileStore_readFile_presult__isset {
  _FileStore_readFile_presult__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_readFile_presult__isset;

class FileStore_readFile_presult {
 public:

  static const char* ascii_fingerprint; // = "3EA130E3D3BEF0C184CE2057A8221B3A";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0xA1,0x30,0xE3,0xD3,0xBE,0xF0,0xC1,0x84,0xCE,0x20,0x57,0xA8,0x22,0x1B,0x3A};


  virtual ~FileStore_readFile_presult() throw();
  RFile* success;
  SystemException systemException;

  _FileStore_readFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_readFile_presult& obj);
};

typedef struct _FileStore_deleteFile_args__isset {
  _FileStore_deleteFile_args__isset() : filename(false), owner(false) {}
  bool filename :1;
  bool owner :1;
} _FileStore_deleteFile_args__isset;

class FileStore_deleteFile_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  FileStore_deleteFile_args(const FileStore_deleteFile_args&);
  FileStore_deleteFile_args& operator=(const FileStore_deleteFile_args&);
  FileStore_deleteFile_args() : filename(), owner() {
  }

  virtual ~FileStore_deleteFile_args() throw();
  std::string filename;
  UserID owner;

  _FileStore_deleteFile_args__isset __isset;

  void __set_filename(const std::string& val);

  void __set_owner(const UserID& val);

  bool operator == (const FileStore_deleteFile_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(owner == rhs.owner))
      return false;
    return true;
  }
  bool operator != (const FileStore_deleteFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_deleteFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_deleteFile_args& obj);
};


class FileStore_deleteFile_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~FileStore_deleteFile_pargs() throw();
  const std::string* filename;
  const UserID* owner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_deleteFile_pargs& obj);
};

typedef struct _FileStore_deleteFile_result__isset {
  _FileStore_deleteFile_result__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_deleteFile_result__isset;

class FileStore_deleteFile_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  FileStore_deleteFile_result(const FileStore_deleteFile_result&);
  FileStore_deleteFile_result& operator=(const FileStore_deleteFile_result&);
  FileStore_deleteFile_result() {
  }

  virtual ~FileStore_deleteFile_result() throw();
  SystemException systemException;

  _FileStore_deleteFile_result__isset __isset;

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_deleteFile_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_deleteFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_deleteFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_deleteFile_result& obj);
};

typedef struct _FileStore_deleteFile_presult__isset {
  _FileStore_deleteFile_presult__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_deleteFile_presult__isset;

class FileStore_deleteFile_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~FileStore_deleteFile_presult() throw();
  SystemException systemException;

  _FileStore_deleteFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_deleteFile_presult& obj);
};

typedef struct _FileStore_setFingertable_args__isset {
  _FileStore_setFingertable_args__isset() : node_list(false) {}
  bool node_list :1;
} _FileStore_setFingertable_args__isset;

class FileStore_setFingertable_args {
 public:

  static const char* ascii_fingerprint; // = "7BAD11F21558D0555AD88C571F9D5931";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0xAD,0x11,0xF2,0x15,0x58,0xD0,0x55,0x5A,0xD8,0x8C,0x57,0x1F,0x9D,0x59,0x31};

  FileStore_setFingertable_args(const FileStore_setFingertable_args&);
  FileStore_setFingertable_args& operator=(const FileStore_setFingertable_args&);
  FileStore_setFingertable_args() {
  }

  virtual ~FileStore_setFingertable_args() throw();
  std::vector<NodeID>  node_list;

  _FileStore_setFingertable_args__isset __isset;

  void __set_node_list(const std::vector<NodeID> & val);

  bool operator == (const FileStore_setFingertable_args & rhs) const
  {
    if (!(node_list == rhs.node_list))
      return false;
    return true;
  }
  bool operator != (const FileStore_setFingertable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_setFingertable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_setFingertable_args& obj);
};


class FileStore_setFingertable_pargs {
 public:

  static const char* ascii_fingerprint; // = "7BAD11F21558D0555AD88C571F9D5931";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0xAD,0x11,0xF2,0x15,0x58,0xD0,0x55,0x5A,0xD8,0x8C,0x57,0x1F,0x9D,0x59,0x31};


  virtual ~FileStore_setFingertable_pargs() throw();
  const std::vector<NodeID> * node_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_setFingertable_pargs& obj);
};


class FileStore_setFingertable_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FileStore_setFingertable_result(const FileStore_setFingertable_result&);
  FileStore_setFingertable_result& operator=(const FileStore_setFingertable_result&);
  FileStore_setFingertable_result() {
  }

  virtual ~FileStore_setFingertable_result() throw();

  bool operator == (const FileStore_setFingertable_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_setFingertable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_setFingertable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_setFingertable_result& obj);
};


class FileStore_setFingertable_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FileStore_setFingertable_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_setFingertable_presult& obj);
};

typedef struct _FileStore_updateFinger_args__isset {
  _FileStore_updateFinger_args__isset() : idx(false), nodeId(false) {}
  bool idx :1;
  bool nodeId :1;
} _FileStore_updateFinger_args__isset;

class FileStore_updateFinger_args {
 public:

  static const char* ascii_fingerprint; // = "DD015B2001600A56F6D67E6F30D9E115";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x01,0x5B,0x20,0x01,0x60,0x0A,0x56,0xF6,0xD6,0x7E,0x6F,0x30,0xD9,0xE1,0x15};

  FileStore_updateFinger_args(const FileStore_updateFinger_args&);
  FileStore_updateFinger_args& operator=(const FileStore_updateFinger_args&);
  FileStore_updateFinger_args() : idx(0) {
  }

  virtual ~FileStore_updateFinger_args() throw();
  int32_t idx;
  NodeID nodeId;

  _FileStore_updateFinger_args__isset __isset;

  void __set_idx(const int32_t val);

  void __set_nodeId(const NodeID& val);

  bool operator == (const FileStore_updateFinger_args & rhs) const
  {
    if (!(idx == rhs.idx))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const FileStore_updateFinger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_updateFinger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_updateFinger_args& obj);
};


class FileStore_updateFinger_pargs {
 public:

  static const char* ascii_fingerprint; // = "DD015B2001600A56F6D67E6F30D9E115";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x01,0x5B,0x20,0x01,0x60,0x0A,0x56,0xF6,0xD6,0x7E,0x6F,0x30,0xD9,0xE1,0x15};


  virtual ~FileStore_updateFinger_pargs() throw();
  const int32_t* idx;
  const NodeID* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_updateFinger_pargs& obj);
};

typedef struct _FileStore_updateFinger_result__isset {
  _FileStore_updateFinger_result__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_updateFinger_result__isset;

class FileStore_updateFinger_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  FileStore_updateFinger_result(const FileStore_updateFinger_result&);
  FileStore_updateFinger_result& operator=(const FileStore_updateFinger_result&);
  FileStore_updateFinger_result() {
  }

  virtual ~FileStore_updateFinger_result() throw();
  SystemException systemException;

  _FileStore_updateFinger_result__isset __isset;

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_updateFinger_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_updateFinger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_updateFinger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_updateFinger_result& obj);
};

typedef struct _FileStore_updateFinger_presult__isset {
  _FileStore_updateFinger_presult__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_updateFinger_presult__isset;

class FileStore_updateFinger_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~FileStore_updateFinger_presult() throw();
  SystemException systemException;

  _FileStore_updateFinger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_updateFinger_presult& obj);
};


class FileStore_getFingertable_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FileStore_getFingertable_args(const FileStore_getFingertable_args&);
  FileStore_getFingertable_args& operator=(const FileStore_getFingertable_args&);
  FileStore_getFingertable_args() {
  }

  virtual ~FileStore_getFingertable_args() throw();

  bool operator == (const FileStore_getFingertable_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_getFingertable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_getFingertable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getFingertable_args& obj);
};


class FileStore_getFingertable_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FileStore_getFingertable_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getFingertable_pargs& obj);
};

typedef struct _FileStore_getFingertable_result__isset {
  _FileStore_getFingertable_result__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_getFingertable_result__isset;

class FileStore_getFingertable_result {
 public:

  static const char* ascii_fingerprint; // = "0E2136712E8A71263F5CA200C33C7303";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x21,0x36,0x71,0x2E,0x8A,0x71,0x26,0x3F,0x5C,0xA2,0x00,0xC3,0x3C,0x73,0x03};

  FileStore_getFingertable_result(const FileStore_getFingertable_result&);
  FileStore_getFingertable_result& operator=(const FileStore_getFingertable_result&);
  FileStore_getFingertable_result() {
  }

  virtual ~FileStore_getFingertable_result() throw();
  std::vector<NodeID>  success;
  SystemException systemException;

  _FileStore_getFingertable_result__isset __isset;

  void __set_success(const std::vector<NodeID> & val);

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_getFingertable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_getFingertable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_getFingertable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getFingertable_result& obj);
};

typedef struct _FileStore_getFingertable_presult__isset {
  _FileStore_getFingertable_presult__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_getFingertable_presult__isset;

class FileStore_getFingertable_presult {
 public:

  static const char* ascii_fingerprint; // = "0E2136712E8A71263F5CA200C33C7303";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x21,0x36,0x71,0x2E,0x8A,0x71,0x26,0x3F,0x5C,0xA2,0x00,0xC3,0x3C,0x73,0x03};


  virtual ~FileStore_getFingertable_presult() throw();
  std::vector<NodeID> * success;
  SystemException systemException;

  _FileStore_getFingertable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getFingertable_presult& obj);
};


class FileStore_fixFingers_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FileStore_fixFingers_args(const FileStore_fixFingers_args&);
  FileStore_fixFingers_args& operator=(const FileStore_fixFingers_args&);
  FileStore_fixFingers_args() {
  }

  virtual ~FileStore_fixFingers_args() throw();

  bool operator == (const FileStore_fixFingers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_fixFingers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_fixFingers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_fixFingers_args& obj);
};


class FileStore_fixFingers_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FileStore_fixFingers_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_fixFingers_pargs& obj);
};

typedef struct _FileStore_fixFingers_result__isset {
  _FileStore_fixFingers_result__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_fixFingers_result__isset;

class FileStore_fixFingers_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  FileStore_fixFingers_result(const FileStore_fixFingers_result&);
  FileStore_fixFingers_result& operator=(const FileStore_fixFingers_result&);
  FileStore_fixFingers_result() {
  }

  virtual ~FileStore_fixFingers_result() throw();
  SystemException systemException;

  _FileStore_fixFingers_result__isset __isset;

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_fixFingers_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_fixFingers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_fixFingers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_fixFingers_result& obj);
};

typedef struct _FileStore_fixFingers_presult__isset {
  _FileStore_fixFingers_presult__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_fixFingers_presult__isset;

class FileStore_fixFingers_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~FileStore_fixFingers_presult() throw();
  SystemException systemException;

  _FileStore_fixFingers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_fixFingers_presult& obj);
};

typedef struct _FileStore_findSucc_args__isset {
  _FileStore_findSucc_args__isset() : key(false) {}
  bool key :1;
} _FileStore_findSucc_args__isset;

class FileStore_findSucc_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FileStore_findSucc_args(const FileStore_findSucc_args&);
  FileStore_findSucc_args& operator=(const FileStore_findSucc_args&);
  FileStore_findSucc_args() : key() {
  }

  virtual ~FileStore_findSucc_args() throw();
  std::string key;

  _FileStore_findSucc_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const FileStore_findSucc_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const FileStore_findSucc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_findSucc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_findSucc_args& obj);
};


class FileStore_findSucc_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~FileStore_findSucc_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_findSucc_pargs& obj);
};

typedef struct _FileStore_findSucc_result__isset {
  _FileStore_findSucc_result__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_findSucc_result__isset;

class FileStore_findSucc_result {
 public:

  static const char* ascii_fingerprint; // = "F65696E052A0926D4C4BEC04BCAF838B";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x56,0x96,0xE0,0x52,0xA0,0x92,0x6D,0x4C,0x4B,0xEC,0x04,0xBC,0xAF,0x83,0x8B};

  FileStore_findSucc_result(const FileStore_findSucc_result&);
  FileStore_findSucc_result& operator=(const FileStore_findSucc_result&);
  FileStore_findSucc_result() {
  }

  virtual ~FileStore_findSucc_result() throw();
  NodeID success;
  SystemException systemException;

  _FileStore_findSucc_result__isset __isset;

  void __set_success(const NodeID& val);

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_findSucc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_findSucc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_findSucc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_findSucc_result& obj);
};

typedef struct _FileStore_findSucc_presult__isset {
  _FileStore_findSucc_presult__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_findSucc_presult__isset;

class FileStore_findSucc_presult {
 public:

  static const char* ascii_fingerprint; // = "F65696E052A0926D4C4BEC04BCAF838B";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x56,0x96,0xE0,0x52,0xA0,0x92,0x6D,0x4C,0x4B,0xEC,0x04,0xBC,0xAF,0x83,0x8B};


  virtual ~FileStore_findSucc_presult() throw();
  NodeID* success;
  SystemException systemException;

  _FileStore_findSucc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_findSucc_presult& obj);
};

typedef struct _FileStore_findPred_args__isset {
  _FileStore_findPred_args__isset() : key(false) {}
  bool key :1;
} _FileStore_findPred_args__isset;

class FileStore_findPred_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FileStore_findPred_args(const FileStore_findPred_args&);
  FileStore_findPred_args& operator=(const FileStore_findPred_args&);
  FileStore_findPred_args() : key() {
  }

  virtual ~FileStore_findPred_args() throw();
  std::string key;

  _FileStore_findPred_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const FileStore_findPred_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const FileStore_findPred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_findPred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_findPred_args& obj);
};


class FileStore_findPred_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~FileStore_findPred_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_findPred_pargs& obj);
};

typedef struct _FileStore_findPred_result__isset {
  _FileStore_findPred_result__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_findPred_result__isset;

class FileStore_findPred_result {
 public:

  static const char* ascii_fingerprint; // = "F65696E052A0926D4C4BEC04BCAF838B";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x56,0x96,0xE0,0x52,0xA0,0x92,0x6D,0x4C,0x4B,0xEC,0x04,0xBC,0xAF,0x83,0x8B};

  FileStore_findPred_result(const FileStore_findPred_result&);
  FileStore_findPred_result& operator=(const FileStore_findPred_result&);
  FileStore_findPred_result() {
  }

  virtual ~FileStore_findPred_result() throw();
  NodeID success;
  SystemException systemException;

  _FileStore_findPred_result__isset __isset;

  void __set_success(const NodeID& val);

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_findPred_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_findPred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_findPred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_findPred_result& obj);
};

typedef struct _FileStore_findPred_presult__isset {
  _FileStore_findPred_presult__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_findPred_presult__isset;

class FileStore_findPred_presult {
 public:

  static const char* ascii_fingerprint; // = "F65696E052A0926D4C4BEC04BCAF838B";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x56,0x96,0xE0,0x52,0xA0,0x92,0x6D,0x4C,0x4B,0xEC,0x04,0xBC,0xAF,0x83,0x8B};


  virtual ~FileStore_findPred_presult() throw();
  NodeID* success;
  SystemException systemException;

  _FileStore_findPred_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_findPred_presult& obj);
};


class FileStore_getNodeSucc_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FileStore_getNodeSucc_args(const FileStore_getNodeSucc_args&);
  FileStore_getNodeSucc_args& operator=(const FileStore_getNodeSucc_args&);
  FileStore_getNodeSucc_args() {
  }

  virtual ~FileStore_getNodeSucc_args() throw();

  bool operator == (const FileStore_getNodeSucc_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_getNodeSucc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_getNodeSucc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getNodeSucc_args& obj);
};


class FileStore_getNodeSucc_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FileStore_getNodeSucc_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getNodeSucc_pargs& obj);
};

typedef struct _FileStore_getNodeSucc_result__isset {
  _FileStore_getNodeSucc_result__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_getNodeSucc_result__isset;

class FileStore_getNodeSucc_result {
 public:

  static const char* ascii_fingerprint; // = "F65696E052A0926D4C4BEC04BCAF838B";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x56,0x96,0xE0,0x52,0xA0,0x92,0x6D,0x4C,0x4B,0xEC,0x04,0xBC,0xAF,0x83,0x8B};

  FileStore_getNodeSucc_result(const FileStore_getNodeSucc_result&);
  FileStore_getNodeSucc_result& operator=(const FileStore_getNodeSucc_result&);
  FileStore_getNodeSucc_result() {
  }

  virtual ~FileStore_getNodeSucc_result() throw();
  NodeID success;
  SystemException systemException;

  _FileStore_getNodeSucc_result__isset __isset;

  void __set_success(const NodeID& val);

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_getNodeSucc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_getNodeSucc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_getNodeSucc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getNodeSucc_result& obj);
};

typedef struct _FileStore_getNodeSucc_presult__isset {
  _FileStore_getNodeSucc_presult__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_getNodeSucc_presult__isset;

class FileStore_getNodeSucc_presult {
 public:

  static const char* ascii_fingerprint; // = "F65696E052A0926D4C4BEC04BCAF838B";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x56,0x96,0xE0,0x52,0xA0,0x92,0x6D,0x4C,0x4B,0xEC,0x04,0xBC,0xAF,0x83,0x8B};


  virtual ~FileStore_getNodeSucc_presult() throw();
  NodeID* success;
  SystemException systemException;

  _FileStore_getNodeSucc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getNodeSucc_presult& obj);
};


class FileStore_getNodePred_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FileStore_getNodePred_args(const FileStore_getNodePred_args&);
  FileStore_getNodePred_args& operator=(const FileStore_getNodePred_args&);
  FileStore_getNodePred_args() {
  }

  virtual ~FileStore_getNodePred_args() throw();

  bool operator == (const FileStore_getNodePred_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_getNodePred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_getNodePred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getNodePred_args& obj);
};


class FileStore_getNodePred_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FileStore_getNodePred_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getNodePred_pargs& obj);
};

typedef struct _FileStore_getNodePred_result__isset {
  _FileStore_getNodePred_result__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_getNodePred_result__isset;

class FileStore_getNodePred_result {
 public:

  static const char* ascii_fingerprint; // = "F65696E052A0926D4C4BEC04BCAF838B";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x56,0x96,0xE0,0x52,0xA0,0x92,0x6D,0x4C,0x4B,0xEC,0x04,0xBC,0xAF,0x83,0x8B};

  FileStore_getNodePred_result(const FileStore_getNodePred_result&);
  FileStore_getNodePred_result& operator=(const FileStore_getNodePred_result&);
  FileStore_getNodePred_result() {
  }

  virtual ~FileStore_getNodePred_result() throw();
  NodeID success;
  SystemException systemException;

  _FileStore_getNodePred_result__isset __isset;

  void __set_success(const NodeID& val);

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_getNodePred_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_getNodePred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_getNodePred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getNodePred_result& obj);
};

typedef struct _FileStore_getNodePred_presult__isset {
  _FileStore_getNodePred_presult__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_getNodePred_presult__isset;

class FileStore_getNodePred_presult {
 public:

  static const char* ascii_fingerprint; // = "F65696E052A0926D4C4BEC04BCAF838B";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x56,0x96,0xE0,0x52,0xA0,0x92,0x6D,0x4C,0x4B,0xEC,0x04,0xBC,0xAF,0x83,0x8B};


  virtual ~FileStore_getNodePred_presult() throw();
  NodeID* success;
  SystemException systemException;

  _FileStore_getNodePred_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_getNodePred_presult& obj);
};

typedef struct _FileStore_setNodePred_args__isset {
  _FileStore_setNodePred_args__isset() : nodeId(false) {}
  bool nodeId :1;
} _FileStore_setNodePred_args__isset;

class FileStore_setNodePred_args {
 public:

  static const char* ascii_fingerprint; // = "3817B00EB9BA1541ED381D326F681982";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0x17,0xB0,0x0E,0xB9,0xBA,0x15,0x41,0xED,0x38,0x1D,0x32,0x6F,0x68,0x19,0x82};

  FileStore_setNodePred_args(const FileStore_setNodePred_args&);
  FileStore_setNodePred_args& operator=(const FileStore_setNodePred_args&);
  FileStore_setNodePred_args() {
  }

  virtual ~FileStore_setNodePred_args() throw();
  NodeID nodeId;

  _FileStore_setNodePred_args__isset __isset;

  void __set_nodeId(const NodeID& val);

  bool operator == (const FileStore_setNodePred_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const FileStore_setNodePred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_setNodePred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_setNodePred_args& obj);
};


class FileStore_setNodePred_pargs {
 public:

  static const char* ascii_fingerprint; // = "3817B00EB9BA1541ED381D326F681982";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0x17,0xB0,0x0E,0xB9,0xBA,0x15,0x41,0xED,0x38,0x1D,0x32,0x6F,0x68,0x19,0x82};


  virtual ~FileStore_setNodePred_pargs() throw();
  const NodeID* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_setNodePred_pargs& obj);
};

typedef struct _FileStore_setNodePred_result__isset {
  _FileStore_setNodePred_result__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_setNodePred_result__isset;

class FileStore_setNodePred_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  FileStore_setNodePred_result(const FileStore_setNodePred_result&);
  FileStore_setNodePred_result& operator=(const FileStore_setNodePred_result&);
  FileStore_setNodePred_result() {
  }

  virtual ~FileStore_setNodePred_result() throw();
  SystemException systemException;

  _FileStore_setNodePred_result__isset __isset;

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_setNodePred_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_setNodePred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_setNodePred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_setNodePred_result& obj);
};

typedef struct _FileStore_setNodePred_presult__isset {
  _FileStore_setNodePred_presult__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_setNodePred_presult__isset;

class FileStore_setNodePred_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~FileStore_setNodePred_presult() throw();
  SystemException systemException;

  _FileStore_setNodePred_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_setNodePred_presult& obj);
};


class FileStore_pullUnownedFiles_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FileStore_pullUnownedFiles_args(const FileStore_pullUnownedFiles_args&);
  FileStore_pullUnownedFiles_args& operator=(const FileStore_pullUnownedFiles_args&);
  FileStore_pullUnownedFiles_args() {
  }

  virtual ~FileStore_pullUnownedFiles_args() throw();

  bool operator == (const FileStore_pullUnownedFiles_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_pullUnownedFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_pullUnownedFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_pullUnownedFiles_args& obj);
};


class FileStore_pullUnownedFiles_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FileStore_pullUnownedFiles_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_pullUnownedFiles_pargs& obj);
};

typedef struct _FileStore_pullUnownedFiles_result__isset {
  _FileStore_pullUnownedFiles_result__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_pullUnownedFiles_result__isset;

class FileStore_pullUnownedFiles_result {
 public:

  static const char* ascii_fingerprint; // = "0640C25C095139EB7759F311AEEC4CB9";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x40,0xC2,0x5C,0x09,0x51,0x39,0xEB,0x77,0x59,0xF3,0x11,0xAE,0xEC,0x4C,0xB9};

  FileStore_pullUnownedFiles_result(const FileStore_pullUnownedFiles_result&);
  FileStore_pullUnownedFiles_result& operator=(const FileStore_pullUnownedFiles_result&);
  FileStore_pullUnownedFiles_result() {
  }

  virtual ~FileStore_pullUnownedFiles_result() throw();
  std::vector<RFile>  success;
  SystemException systemException;

  _FileStore_pullUnownedFiles_result__isset __isset;

  void __set_success(const std::vector<RFile> & val);

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_pullUnownedFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_pullUnownedFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_pullUnownedFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_pullUnownedFiles_result& obj);
};

typedef struct _FileStore_pullUnownedFiles_presult__isset {
  _FileStore_pullUnownedFiles_presult__isset() : success(false), systemException(false) {}
  bool success :1;
  bool systemException :1;
} _FileStore_pullUnownedFiles_presult__isset;

class FileStore_pullUnownedFiles_presult {
 public:

  static const char* ascii_fingerprint; // = "0640C25C095139EB7759F311AEEC4CB9";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x40,0xC2,0x5C,0x09,0x51,0x39,0xEB,0x77,0x59,0xF3,0x11,0xAE,0xEC,0x4C,0xB9};


  virtual ~FileStore_pullUnownedFiles_presult() throw();
  std::vector<RFile> * success;
  SystemException systemException;

  _FileStore_pullUnownedFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_pullUnownedFiles_presult& obj);
};

typedef struct _FileStore_pushUnownedFiles_args__isset {
  _FileStore_pushUnownedFiles_args__isset() : files(false) {}
  bool files :1;
} _FileStore_pushUnownedFiles_args__isset;

class FileStore_pushUnownedFiles_args {
 public:

  static const char* ascii_fingerprint; // = "03DB15CB607A96297121F7E4731F3E6E";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0xDB,0x15,0xCB,0x60,0x7A,0x96,0x29,0x71,0x21,0xF7,0xE4,0x73,0x1F,0x3E,0x6E};

  FileStore_pushUnownedFiles_args(const FileStore_pushUnownedFiles_args&);
  FileStore_pushUnownedFiles_args& operator=(const FileStore_pushUnownedFiles_args&);
  FileStore_pushUnownedFiles_args() {
  }

  virtual ~FileStore_pushUnownedFiles_args() throw();
  std::vector<RFile>  files;

  _FileStore_pushUnownedFiles_args__isset __isset;

  void __set_files(const std::vector<RFile> & val);

  bool operator == (const FileStore_pushUnownedFiles_args & rhs) const
  {
    if (!(files == rhs.files))
      return false;
    return true;
  }
  bool operator != (const FileStore_pushUnownedFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_pushUnownedFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_pushUnownedFiles_args& obj);
};


class FileStore_pushUnownedFiles_pargs {
 public:

  static const char* ascii_fingerprint; // = "03DB15CB607A96297121F7E4731F3E6E";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0xDB,0x15,0xCB,0x60,0x7A,0x96,0x29,0x71,0x21,0xF7,0xE4,0x73,0x1F,0x3E,0x6E};


  virtual ~FileStore_pushUnownedFiles_pargs() throw();
  const std::vector<RFile> * files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_pushUnownedFiles_pargs& obj);
};

typedef struct _FileStore_pushUnownedFiles_result__isset {
  _FileStore_pushUnownedFiles_result__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_pushUnownedFiles_result__isset;

class FileStore_pushUnownedFiles_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  FileStore_pushUnownedFiles_result(const FileStore_pushUnownedFiles_result&);
  FileStore_pushUnownedFiles_result& operator=(const FileStore_pushUnownedFiles_result&);
  FileStore_pushUnownedFiles_result() {
  }

  virtual ~FileStore_pushUnownedFiles_result() throw();
  SystemException systemException;

  _FileStore_pushUnownedFiles_result__isset __isset;

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_pushUnownedFiles_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_pushUnownedFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_pushUnownedFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_pushUnownedFiles_result& obj);
};

typedef struct _FileStore_pushUnownedFiles_presult__isset {
  _FileStore_pushUnownedFiles_presult__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_pushUnownedFiles_presult__isset;

class FileStore_pushUnownedFiles_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~FileStore_pushUnownedFiles_presult() throw();
  SystemException systemException;

  _FileStore_pushUnownedFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_pushUnownedFiles_presult& obj);
};

typedef struct _FileStore_join_args__isset {
  _FileStore_join_args__isset() : nodeId(false) {}
  bool nodeId :1;
} _FileStore_join_args__isset;

class FileStore_join_args {
 public:

  static const char* ascii_fingerprint; // = "3817B00EB9BA1541ED381D326F681982";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0x17,0xB0,0x0E,0xB9,0xBA,0x15,0x41,0xED,0x38,0x1D,0x32,0x6F,0x68,0x19,0x82};

  FileStore_join_args(const FileStore_join_args&);
  FileStore_join_args& operator=(const FileStore_join_args&);
  FileStore_join_args() {
  }

  virtual ~FileStore_join_args() throw();
  NodeID nodeId;

  _FileStore_join_args__isset __isset;

  void __set_nodeId(const NodeID& val);

  bool operator == (const FileStore_join_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const FileStore_join_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_join_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_join_args& obj);
};


class FileStore_join_pargs {
 public:

  static const char* ascii_fingerprint; // = "3817B00EB9BA1541ED381D326F681982";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0x17,0xB0,0x0E,0xB9,0xBA,0x15,0x41,0xED,0x38,0x1D,0x32,0x6F,0x68,0x19,0x82};


  virtual ~FileStore_join_pargs() throw();
  const NodeID* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_join_pargs& obj);
};

typedef struct _FileStore_join_result__isset {
  _FileStore_join_result__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_join_result__isset;

class FileStore_join_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  FileStore_join_result(const FileStore_join_result&);
  FileStore_join_result& operator=(const FileStore_join_result&);
  FileStore_join_result() {
  }

  virtual ~FileStore_join_result() throw();
  SystemException systemException;

  _FileStore_join_result__isset __isset;

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_join_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_join_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_join_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_join_result& obj);
};

typedef struct _FileStore_join_presult__isset {
  _FileStore_join_presult__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_join_presult__isset;

class FileStore_join_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~FileStore_join_presult() throw();
  SystemException systemException;

  _FileStore_join_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_join_presult& obj);
};


class FileStore_remove_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FileStore_remove_args(const FileStore_remove_args&);
  FileStore_remove_args& operator=(const FileStore_remove_args&);
  FileStore_remove_args() {
  }

  virtual ~FileStore_remove_args() throw();

  bool operator == (const FileStore_remove_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_remove_args& obj);
};


class FileStore_remove_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FileStore_remove_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_remove_pargs& obj);
};

typedef struct _FileStore_remove_result__isset {
  _FileStore_remove_result__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_remove_result__isset;

class FileStore_remove_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  FileStore_remove_result(const FileStore_remove_result&);
  FileStore_remove_result& operator=(const FileStore_remove_result&);
  FileStore_remove_result() {
  }

  virtual ~FileStore_remove_result() throw();
  SystemException systemException;

  _FileStore_remove_result__isset __isset;

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_remove_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_remove_result& obj);
};

typedef struct _FileStore_remove_presult__isset {
  _FileStore_remove_presult__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_remove_presult__isset;

class FileStore_remove_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~FileStore_remove_presult() throw();
  SystemException systemException;

  _FileStore_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_remove_presult& obj);
};


class FileStore_stabilize_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FileStore_stabilize_args(const FileStore_stabilize_args&);
  FileStore_stabilize_args& operator=(const FileStore_stabilize_args&);
  FileStore_stabilize_args() {
  }

  virtual ~FileStore_stabilize_args() throw();

  bool operator == (const FileStore_stabilize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_stabilize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_stabilize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_stabilize_args& obj);
};


class FileStore_stabilize_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FileStore_stabilize_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_stabilize_pargs& obj);
};

typedef struct _FileStore_stabilize_result__isset {
  _FileStore_stabilize_result__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_stabilize_result__isset;

class FileStore_stabilize_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  FileStore_stabilize_result(const FileStore_stabilize_result&);
  FileStore_stabilize_result& operator=(const FileStore_stabilize_result&);
  FileStore_stabilize_result() {
  }

  virtual ~FileStore_stabilize_result() throw();
  SystemException systemException;

  _FileStore_stabilize_result__isset __isset;

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_stabilize_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_stabilize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_stabilize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_stabilize_result& obj);
};

typedef struct _FileStore_stabilize_presult__isset {
  _FileStore_stabilize_presult__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_stabilize_presult__isset;

class FileStore_stabilize_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~FileStore_stabilize_presult() throw();
  SystemException systemException;

  _FileStore_stabilize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_stabilize_presult& obj);
};

typedef struct _FileStore_notify_args__isset {
  _FileStore_notify_args__isset() : nodeId(false) {}
  bool nodeId :1;
} _FileStore_notify_args__isset;

class FileStore_notify_args {
 public:

  static const char* ascii_fingerprint; // = "3817B00EB9BA1541ED381D326F681982";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0x17,0xB0,0x0E,0xB9,0xBA,0x15,0x41,0xED,0x38,0x1D,0x32,0x6F,0x68,0x19,0x82};

  FileStore_notify_args(const FileStore_notify_args&);
  FileStore_notify_args& operator=(const FileStore_notify_args&);
  FileStore_notify_args() {
  }

  virtual ~FileStore_notify_args() throw();
  NodeID nodeId;

  _FileStore_notify_args__isset __isset;

  void __set_nodeId(const NodeID& val);

  bool operator == (const FileStore_notify_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const FileStore_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_notify_args& obj);
};


class FileStore_notify_pargs {
 public:

  static const char* ascii_fingerprint; // = "3817B00EB9BA1541ED381D326F681982";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0x17,0xB0,0x0E,0xB9,0xBA,0x15,0x41,0xED,0x38,0x1D,0x32,0x6F,0x68,0x19,0x82};


  virtual ~FileStore_notify_pargs() throw();
  const NodeID* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_notify_pargs& obj);
};

typedef struct _FileStore_notify_result__isset {
  _FileStore_notify_result__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_notify_result__isset;

class FileStore_notify_result {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  FileStore_notify_result(const FileStore_notify_result&);
  FileStore_notify_result& operator=(const FileStore_notify_result&);
  FileStore_notify_result() {
  }

  virtual ~FileStore_notify_result() throw();
  SystemException systemException;

  _FileStore_notify_result__isset __isset;

  void __set_systemException(const SystemException& val);

  bool operator == (const FileStore_notify_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileStore_notify_result& obj);
};

typedef struct _FileStore_notify_presult__isset {
  _FileStore_notify_presult__isset() : systemException(false) {}
  bool systemException :1;
} _FileStore_notify_presult__isset;

class FileStore_notify_presult {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~FileStore_notify_presult() throw();
  SystemException systemException;

  _FileStore_notify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileStore_notify_presult& obj);
};

class FileStoreClient : virtual public FileStoreIf {
 public:
  FileStoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileStoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void writeFile(const RFile& rFile);
  void send_writeFile(const RFile& rFile);
  void recv_writeFile();
  void readFile(RFile& _return, const std::string& filename, const UserID& owner);
  void send_readFile(const std::string& filename, const UserID& owner);
  void recv_readFile(RFile& _return);
  void deleteFile(const std::string& filename, const UserID& owner);
  void send_deleteFile(const std::string& filename, const UserID& owner);
  void recv_deleteFile();
  void setFingertable(const std::vector<NodeID> & node_list);
  void send_setFingertable(const std::vector<NodeID> & node_list);
  void recv_setFingertable();
  void updateFinger(const int32_t idx, const NodeID& nodeId);
  void send_updateFinger(const int32_t idx, const NodeID& nodeId);
  void recv_updateFinger();
  void getFingertable(std::vector<NodeID> & _return);
  void send_getFingertable();
  void recv_getFingertable(std::vector<NodeID> & _return);
  void fixFingers();
  void send_fixFingers();
  void recv_fixFingers();
  void findSucc(NodeID& _return, const std::string& key);
  void send_findSucc(const std::string& key);
  void recv_findSucc(NodeID& _return);
  void findPred(NodeID& _return, const std::string& key);
  void send_findPred(const std::string& key);
  void recv_findPred(NodeID& _return);
  void getNodeSucc(NodeID& _return);
  void send_getNodeSucc();
  void recv_getNodeSucc(NodeID& _return);
  void getNodePred(NodeID& _return);
  void send_getNodePred();
  void recv_getNodePred(NodeID& _return);
  void setNodePred(const NodeID& nodeId);
  void send_setNodePred(const NodeID& nodeId);
  void recv_setNodePred();
  void pullUnownedFiles(std::vector<RFile> & _return);
  void send_pullUnownedFiles();
  void recv_pullUnownedFiles(std::vector<RFile> & _return);
  void pushUnownedFiles(const std::vector<RFile> & files);
  void send_pushUnownedFiles(const std::vector<RFile> & files);
  void recv_pushUnownedFiles();
  void join(const NodeID& nodeId);
  void send_join(const NodeID& nodeId);
  void recv_join();
  void remove();
  void send_remove();
  void recv_remove();
  void stabilize();
  void send_stabilize();
  void recv_stabilize();
  void notify(const NodeID& nodeId);
  void send_notify(const NodeID& nodeId);
  void recv_notify();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileStoreProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FileStoreIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileStoreProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_writeFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setFingertable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateFinger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFingertable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fixFingers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findSucc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findPred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNodeSucc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNodePred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setNodePred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pullUnownedFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushUnownedFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_join(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stabilize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileStoreProcessor(boost::shared_ptr<FileStoreIf> iface) :
    iface_(iface) {
    processMap_["writeFile"] = &FileStoreProcessor::process_writeFile;
    processMap_["readFile"] = &FileStoreProcessor::process_readFile;
    processMap_["deleteFile"] = &FileStoreProcessor::process_deleteFile;
    processMap_["setFingertable"] = &FileStoreProcessor::process_setFingertable;
    processMap_["updateFinger"] = &FileStoreProcessor::process_updateFinger;
    processMap_["getFingertable"] = &FileStoreProcessor::process_getFingertable;
    processMap_["fixFingers"] = &FileStoreProcessor::process_fixFingers;
    processMap_["findSucc"] = &FileStoreProcessor::process_findSucc;
    processMap_["findPred"] = &FileStoreProcessor::process_findPred;
    processMap_["getNodeSucc"] = &FileStoreProcessor::process_getNodeSucc;
    processMap_["getNodePred"] = &FileStoreProcessor::process_getNodePred;
    processMap_["setNodePred"] = &FileStoreProcessor::process_setNodePred;
    processMap_["pullUnownedFiles"] = &FileStoreProcessor::process_pullUnownedFiles;
    processMap_["pushUnownedFiles"] = &FileStoreProcessor::process_pushUnownedFiles;
    processMap_["join"] = &FileStoreProcessor::process_join;
    processMap_["remove"] = &FileStoreProcessor::process_remove;
    processMap_["stabilize"] = &FileStoreProcessor::process_stabilize;
    processMap_["notify"] = &FileStoreProcessor::process_notify;
  }

  virtual ~FileStoreProcessor() {}
};

class FileStoreProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileStoreProcessorFactory(const ::boost::shared_ptr< FileStoreIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FileStoreIfFactory > handlerFactory_;
};

class FileStoreMultiface : virtual public FileStoreIf {
 public:
  FileStoreMultiface(std::vector<boost::shared_ptr<FileStoreIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FileStoreMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FileStoreIf> > ifaces_;
  FileStoreMultiface() {}
  void add(boost::shared_ptr<FileStoreIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void writeFile(const RFile& rFile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeFile(rFile);
    }
    ifaces_[i]->writeFile(rFile);
  }

  void readFile(RFile& _return, const std::string& filename, const UserID& owner) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readFile(_return, filename, owner);
    }
    ifaces_[i]->readFile(_return, filename, owner);
    return;
  }

  void deleteFile(const std::string& filename, const UserID& owner) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteFile(filename, owner);
    }
    ifaces_[i]->deleteFile(filename, owner);
  }

  void setFingertable(const std::vector<NodeID> & node_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setFingertable(node_list);
    }
    ifaces_[i]->setFingertable(node_list);
  }

  void updateFinger(const int32_t idx, const NodeID& nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateFinger(idx, nodeId);
    }
    ifaces_[i]->updateFinger(idx, nodeId);
  }

  void getFingertable(std::vector<NodeID> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFingertable(_return);
    }
    ifaces_[i]->getFingertable(_return);
    return;
  }

  void fixFingers() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fixFingers();
    }
    ifaces_[i]->fixFingers();
  }

  void findSucc(NodeID& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findSucc(_return, key);
    }
    ifaces_[i]->findSucc(_return, key);
    return;
  }

  void findPred(NodeID& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findPred(_return, key);
    }
    ifaces_[i]->findPred(_return, key);
    return;
  }

  void getNodeSucc(NodeID& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNodeSucc(_return);
    }
    ifaces_[i]->getNodeSucc(_return);
    return;
  }

  void getNodePred(NodeID& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNodePred(_return);
    }
    ifaces_[i]->getNodePred(_return);
    return;
  }

  void setNodePred(const NodeID& nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setNodePred(nodeId);
    }
    ifaces_[i]->setNodePred(nodeId);
  }

  void pullUnownedFiles(std::vector<RFile> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pullUnownedFiles(_return);
    }
    ifaces_[i]->pullUnownedFiles(_return);
    return;
  }

  void pushUnownedFiles(const std::vector<RFile> & files) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushUnownedFiles(files);
    }
    ifaces_[i]->pushUnownedFiles(files);
  }

  void join(const NodeID& nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->join(nodeId);
    }
    ifaces_[i]->join(nodeId);
  }

  void remove() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove();
    }
    ifaces_[i]->remove();
  }

  void stabilize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stabilize();
    }
    ifaces_[i]->stabilize();
  }

  void notify(const NodeID& nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notify(nodeId);
    }
    ifaces_[i]->notify(nodeId);
  }

};



#endif
